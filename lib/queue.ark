# Data structure for a simple queue

!use "mem"

struct Queue {
    # size of the queue
    size: int,

    # index of the next item in the queue
    next: int,

    # the capacity of the queue
    capacity: int,

    # the queues data
    data: ^(^void),
}

impl Queue {

    # create a new queue with the given
    # capacity
    func new(capacity: usize) {
        self.size = 0;
        self.next = 0;
        self.capacity = capacity;
        self.data = Block::new(sizeof(^self.data));
    }

    # returns if the queue is full
    func full() {
        return self.size >= size.capacity;
    }

    # delete the queue
    func delete() {
        Block::delete(self.data);
        Block::delete(self);
    }

    # adds a value to the queue
    # returns true on success
    # and false on failure
    func add(value: ^void): bool {
        if (self.full()) {
            return false;
        }

        currentPosition: int = self.next + self.size;
        if currentPosition >= self.capacity {
            currentPosition = currentPosition - self.capacity;
        }
        self.data[currentPosition] = value;
        self.size = self.size + 1;

        return true;
    }

    # remove a value from the queue
    func remove() {
        mut value: ^void;

        if self.size > 0 {
            value = self.data[self.next];
            self.next = self.next + 1;
            self.size = self.size - 1;
            if self.next >= self.capacity {
                self.next = self.next - self.capacity;
            }
        }
    }

    # peek at the next value in the queue
    # returns the item in the queue, or
    # false if there is no item
    func peek(): ^void {
        if self.size {
            return self.data[self.next];
        }
        return false;
    }

}
