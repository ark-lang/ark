[c] func printf(fmt: str, ...): int;
[c] func malloc(size: uint): ^void;
[c] func free(ptr: ^void);

type Test struct {
    x: int = 1,
    y: int = 2,
    a: int = 3,
    b: int = 4
};

func main(): int {
	x := default(int);
	y := default(bool);

	C::printf("x = %d\n", x);
	if x != 0 {
		return 1;
	}

	C::printf("y = %d\n", y);
	if y != false {
		return 2;
	}

	t := ^Test(C::malloc(sizeof(^Test)));
	defer C::free(^void(t));
	default(^t);

    C::printf("t.x = %d\n", t.x);
    if t.x != 1 {
    	return 3;
    }

    C::printf("t.y = %d\n", t.y);
    if t.y != 2 {
    	return 4;
    }

    C::printf("t.a = %d\n", t.a);
    if t.a != 3 {
    	return 5;
    }

    C::printf("t.b = %d\n", t.b);
    if t.b != 4 {
    	return 6;
    }

    return 0;
}
