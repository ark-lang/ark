[c] func printf(fmt: str, ...) -> int;
[c] func malloc(size: uint) -> ^void;

type Option<T> enum {
    None,
    Some(T)
};

type RC<T> struct {
	refs: int = 0,
	val: ^T,
};

func alloc<T>() -> ^int {
    ptr := C::malloc(sizeof(int));
    // ... // Check allocation success
    return ^int(ptr);
}

func main() -> int {
	a: int = 0;
	x := Option::None<bool>;
	y := Option::Some<int>(a);

	C::printf("x tag: %d\n", x);
	C::printf("y tag: %d\n", y);

	h: u8 = 1;
	mut i := default(RC<u8>);
	i.val = &h;
	C::printf("sizeof(^i.val) = %d\n", sizeof(^i.val));
	if sizeof(^i.val) != 1 {
		return 1;
	}

	j: u16 = 1;
	mut k := default(RC<u16>);
	k.val = &j;
	C::printf("sizeof(^k.val) = %d\n", sizeof(^k.val));
	if sizeof(^k.val) != 2 {
		return 1;
	}

	q := alloc<int>();
	w: ^int = alloc();

	C::printf("q addr: %x\n", q);
	C::printf("w addr: %x\n", w);

	return 0;
}
