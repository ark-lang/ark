/**

    This is a simple virtual machine, originally I wrote this in Rust, but I've ported it to Alloy.
    I think this will work as a test case as it uses a fair amount of the core features in Alloy, enumeration,
    structures, methods, functions, arrays, matches, if statements, loops, etc... I'm not sure this even works yet,
    and some of the features aren't even implemented yet on the grammar.

**/

struct VirtualMachine {
    int instruction_num;
    int first_register;
    int second_register;
    int third_register;
    int imm_value;
    bool running;
    int pc;
    int registers[4];
}

enum _ {
    ADD,
    SUB,
    MUL,
    DIV,
}

fn (VirtualMachine ^vm) fetch(int prog[]): int {
    vm.pc = vm.pc + 1;
    return prog[vm.pc];
}

fn (VirtualMachine ^vm) goto(): void {
    vm.pc = vm.imm_value;
}

fn (VirtualMachine ^vm) eval(): void {
    match vm.instruction_num {
        0 -> vm.stop();
        1 -> vm.set();
        2 -> vm.arithmetic(ADD);
        3 -> vm.arithmetic(SUB);
        4 -> vm.arithmetic(MUL);
        5 -> vm.arithmetic(DIV);
        6 -> vm.arithmetic(POW);
        7 -> vm.out();
        8 -> vm.goto();
        _ -> printf("unknown instruction %d\n", vm.instruction_num);
    }
}

fn (VirtualMachine ^vm) decode(int instruction): void {
    vm.instruction_num = (instruction & 0xF000) >> 12;
    vm.first_register = (instruction & 0xF00) >> 8;
    vm.second_register = (instruction & 0xF0) >> 4;
    vm.third_register = instruction & 0xF;
    vm.imm_value = instruction & 0xFF;
}

fn (VirtualMachine ^vm) set(): void {
    int temp = vm.registers[vm.first_register];
    vm.registers[vm.first_register] = vm.imm_value;
}

fn (VirtualMachine ^vm) stop(): void {
    vm.running = false;
}

fn (VirtualMachine ^vm) arithmetic(int type): void {
    match type {
        ADD -> {
            vm.registers[vm.first_register] = vm.registers[vm.second_register] + vm.registers[vm.third_register];
        };
        SUB -> {
            vm.registers[vm.first_register] = vm.registers[vm.second_register] - vm.registers[vm.third_register];
        };
        MUL -> {
            vm.registers[vm.first_register] = vm.registers[vm.second_register] * vm.registers[vm.third_register];
        };
        DIV -> {
            vm.registers[vm.first_register] = vm.registers[vm.second_register] / vm.registers[vm.third_register];
        };
    }
}

fn (VirtualMachine ^vm) start(int prog[]): void {
    while vm.running {
        int instr = vm.fetch(prog);
        vm.decode(instr);
        vm.eval();
    }
}

fn main(): int {
    VirtualMachine ^vm = {
        instruction_num = 0,
        first_register = 0,
        second_register = 0,
        third_register = 0,
        imm_value = 0,
        running = true,
        registers = [ 0, 0, 0, 0 ],
    };

    int prog = [
        0x10C8,
        0x7000,
        0x11f4,
        0x7001,
        0x2201,
        0x7002,
        0x0000,
    ];

    vm.start(prog);

    return 0;
}