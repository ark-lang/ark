/**

    This is a simple virtual machine, originally I wrote this in Rust, but I've ported it to Alloy.
  
    I think this will work as a test case as it uses a fair amount of the core features in Alloy, enumeration,
    structures, methods, functions, arrays, matches, if statements, loops, etc... I'm not sure this even works yet,
    and some of the features aren't even implemented yet on the grammar, only enumeration and a few small bits like
    where semi-colons are permitted, etc.

**/

enum _ {
    ADD,
    SUB,
    MUL,
    DIV,
}

struct VirtualMachine {
    instruction_num: int;
    first_register: int;
    second_register: int;
    third_register: int;
    imm_value: int; 
    running: bool;
    pc: int;
    registers: [4]int;
}

impl VirtualMachine {
    fn fetch(prog: []int): int {
        vm.pc = vm.pc + 1;
        return prog[vm.pc];
    }

    fn goto() {
        vm.pc = vm.imm_value;
    }

    fn eval() {
        match vm.instruction_num {
            0 -> vm.stop();
            1 -> vm.set();
            2 -> vm.arithmetic(ADD);
            3 -> vm.arithmetic(SUB);
            4 -> vm.arithmetic(MUL);
            5 -> vm.arithmetic(DIV);
            6 -> vm.arithmetic(POW);
            7 -> vm.out();
            8 -> vm.goto();
            _ -> printf("unknown instruction %d\n", vm.instruction_num);
        }
    }

    fn decode(instruction: int) {
        vm.instruction_num = (instruction & 0xF000) >> 12;
        vm.first_register = (instruction & 0xF00) >> 8;
        vm.second_register = (instruction & 0xF0) >> 4;
        vm.third_register = instruction & 0xF;
        vm.imm_value = instruction & 0xFF;
    }

    fn set() {
        temp: int = vm.registers[vm.first_register];
        vm.registers[vm.first_register] = vm.imm_value;
    }

    fn stop() {
        vm.running = false;
    }

    fn arithmetic(typ: int) {
        match typ {
            ADD {
                vm.registers[vm.first_register] = vm.registers[vm.second_register] + vm.registers[vm.third_register];
            };
            SUB {
                vm.registers[vm.first_register] = vm.registers[vm.second_register] - vm.registers[vm.third_register];
            };
            MUL {
                vm.registers[vm.first_register] = vm.registers[vm.second_register] * vm.registers[vm.third_register];
            };
            DIV {
                vm.registers[vm.first_register] = vm.registers[vm.second_register] / vm.registers[vm.third_register];
            };
        }
    }

    fn start(prog: []int) {
        for vm.running {
            instr: int = vm.fetch(prog);
            vm.decode(instr);
            vm.eval();
        }
    }
}

fn main(): int {
    vm: ^VirtualMachine = {
        instruction_num = 0,
        first_register = 0,
        second_register = 0,
        third_register = 0,
        imm_value = 0,
        running = true,
        registers = [ 0, 0, 0, 0 ],
    };

    prog: []int = [
        0x10C8,
        0x7000,
        0x11f4,
        0x7001,
        0x2201,
        0x7002,
        0x0000,
    ];

    vm.start(prog);

    return 0;
}