fn printf(fmt: str, _);

struct VM {
    mut running: bool,
    mut ip: int,
    mut sp: int,
    mut stack: [256]int
}

enum Instructions {
    PSH,
    ADD,
    POP,
    HLT
}

program: []int = [
    PSH, 5,
    PSH, 5,
    ADD,
    POP,
    HLT
];

impl VM {
    fn fetch(): int {
        return program[ip];
    }
    
    fn eval(instr: int) {
        match instr {
            HLT -> {
                self.running = false;
                printf("running\n");
            }
            PSH -> {
                self.sp = self.sp + 1;
                self.ip = self.ip + 1;
                self.stack[self.sp] = program[self.ip];
            }
            POP -> {
                val_popped: int = self.stack[self.sp];
                self.sp = self.sp - 1;
                printf("popped %d\n", val_popped);
            }
            ADD -> {
                a: int = self.stack[self.sp];
                self.sp = self.sp - 1;
                b: int = self.stack[self.sp];
                self.sp = self.sp - 1;
                result: int = b + a;
                self.sp = self.sp + 1;
                self.stack[self.sp] = result;   
            }
        }
    }

    fn start(): void {
        self.running = true;
        self.ip = 0;
        self.sp = 0;
        
        for self.running {
            self.eval(self.fetch());
            self.ip = self.ip + 1;
        }
    }
}

fn main(): int {
    vm: VM;
    vm.start();
    return 0;
}
